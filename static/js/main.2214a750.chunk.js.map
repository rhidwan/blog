{"version":3,"sources":["components/PostItem.js","components/Spinner.js","components/Posts.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["PostItem","this","props","post","title","excerpt","id","date","Card","className","Body","Title","to","rendered","Text","icon","faCalendar","Intl","DateTimeFormat","month","day","year","format","Date","dangerouslySetInnerHTML","__html","Button","variant","Component","override","css","Spinner","size","color","Posts","state","posts","isLoaded","axios","get","then","res","setState","data","catch","err","console","log","map","key","Post","match","params","faArrowLeft","content","library","add","fab","App","Row","Col","md","sm","xs","alt","src","href","Container","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RA6BeA,E,iLArBH,IAAD,EAC8BC,KAAKC,MAAMC,KAAxCC,EADD,EACCA,MAAOC,EADR,EACQA,QAASC,EADjB,EACiBA,GAAKC,EADtB,EACsBA,KAE7B,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,kEACd,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,CAAYF,UAAU,IAAG,4BAAI,kBAAC,IAAD,CAAMG,GAAE,eAAUN,IAAOF,EAAMS,YAC5D,kBAACL,EAAA,EAAKM,KAAN,CAAWL,UAAU,cAAa,kBAAC,IAAD,CAAiBM,KAAMC,MAAzD,KAA0E,IAAIC,KAAKC,eAAe,QAAS,CACjFC,MAAO,OACPC,IAAK,UACLC,KAAM,YACPC,OAAO,IAAIC,KAAKhB,KAEzC,kBAACC,EAAA,EAAKM,KAAN,CAAWU,wBAAyB,CAACC,OAAOpB,EAAQQ,YACpD,kBAAC,IAAD,CAAMD,GAAE,eAAUN,IAAM,kBAACoB,EAAA,EAAD,CAAQC,QAAQ,gBAAhB,2B,GAfXC,a,0LCFvB,IAAMC,EAAWC,cAAH,KAsBCC,E,iLAbX,OACI,yBAAKtB,UAAU,iBACX,kBAAC,kBAAD,CACAqB,IAAKD,EACLG,KAAM,GAENC,MAAO,iB,GARGL,aC2BPM,E,2MAjCbC,MAAQ,CACFC,MAAQ,GACRC,UAAW,G,mFAGG,IAAD,OACjBC,IAAMC,IAAI,yDACTC,MAAM,SAAAC,GAAG,OAAI,EAAKC,SAAS,CACzBN,MAAQK,EAAIE,KACZN,UAAU,OAEZO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAI1BC,QAAQC,IAAI9C,KAAKkC,OADV,MAEmBlC,KAAKkC,MAAxBC,EAFA,EAEAA,MACP,OAHO,EAEOC,SAGV,6BACGD,EAAMY,KAAI,SAAA7C,GAAI,OACZ,kBAAC,EAAD,CAAU8C,IAAK9C,EAAKG,GAAIH,KAAMA,QAOrC,kBAAC,EAAD,U,GA7BcyB,aCoCLsB,E,2MAhCXf,MAAQ,CACJhC,KAAO,GACPkC,UAAW,G,mFAGG,IAAD,OACjBC,IAAMC,IAAN,gEAAmEtC,KAAKC,MAAMiD,MAAMC,OAAO9C,KAC1FkC,MAAM,SAAAC,GAAG,OAAI,EAAKC,SAAS,CACzBvC,KAAOsC,EAAIE,KACXN,UAAU,OAEZO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAGlB,IAAD,EACkB5C,KAAKkC,MAAvBhC,EADA,EACAA,KACP,OAFO,EACMkC,SAGL,kBAAC,WAAD,KACI,kBAAC,IAAD,CAAMzB,GAAG,KAAI,kBAAC,IAAD,CAAiBG,KAAMsC,MAApC,cACA,6BACA,4BAAKlD,EAAKC,MAAMS,UAChB,yBAAKW,wBAAyB,CAACC,OAAQtB,EAAKmD,QAAQzC,aAK9D,kBAAC,EAAD,U,GA5Bae,a,+CCGnB2B,IAAQC,IAAIC,KAqCGC,MAlCf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKnD,UAAU,eAAeoD,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAC9C,wBAAItD,UAAU,eAAc,wDAC5B,kBAACkD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKE,GAAI,EAAGC,GAAI,GAAG,yBAAKtD,UAAU,SAASuD,IAAI,SAASC,IAAI,wBAC5D,kBAACL,EAAA,EAAD,CAAKE,GAAI,GAAIC,GAAI,IAAjB,mBACE,uBAAGG,KAAK,6BAA4B,2BAAG,wDACvC,uEAA4C,oFAA5C,mBAA6H,iDAGjI,kBAACP,EAAA,EAAD,CAAKlD,UAAU,QACb,kBAAC0D,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWpC,IACrC,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,iBAAiBC,UAAapB,QAMxD,kBAACS,EAAA,EAAD,SCzBYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2D,cCXNwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,iB","file":"static/js/main.2214a750.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faCalendar} from \"@fortawesome/free-solid-svg-icons\";\n\nclass PostItem extends Component {\n  render() {\n    const { title, excerpt, id , date} = this.props.post ;\n   \n    return (\n      <Card className=\"mb-3 border-left-2 border-top-0 border-right-0 border-bottom-0\">\n        <Card.Body>\n          <Card.Title className=\"\"><h3><Link to={`post/${id}`}>{title.rendered}</Link></h3></Card.Title>\n          <Card.Text className=\"text-muted\"><FontAwesomeIcon icon={faCalendar} />  {new Intl.DateTimeFormat('en-GB', { \n                                    month: 'long', \n                                    day: '2-digit',\n                                    year: 'numeric', \n                                }).format(new Date(date))}\n          </Card.Text>\n          <Card.Text dangerouslySetInnerHTML={{__html:excerpt.rendered}} />\n          <Link to={`post/${id}`}><Button variant=\"outline-dark\">Continue Reading</Button></Link>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default PostItem;\n","import React, { Component } from 'react';\nimport { css } from \"@emotion/core\";\nimport { PropagateLoader } from \"react-spinners\";\n\n\nconst override = css`\nposition: absolute;\ntop: 30vh;\nleft: 50%;\ntransform: translateX(-50%) translateY(-50%);\n`;\n\nclass Spinner extends Component {\n  render() {\n    return (\n        <div className=\"sweet-loading\">\n            <PropagateLoader\n            css={override}\n            size={15}\n            //size={\"150px\"} this also works\n            color={\"#000000\"}\n            />\n        </div>\n    );\n  }\n}\n\nexport default Spinner;\n","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport PostItem from \"./PostItem\";\nimport Spinner from './Spinner';\n\nclass Posts extends Component {\n  state = {\n        posts : [],\n        isLoaded : false\n  }\n\n  componentDidMount(){\n    axios.get(\"https://rhidwan.000webhostapp.com/wp-json/wp/v2/posts\")\n    .then( res => this.setState({\n       posts : res.data,\n       isLoaded: true\n    }))\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    console.log(this.state);\n    const {posts, isLoaded} = this.state;\n    if (isLoaded) {\n      return (\n        <div>\n          {posts.map(post => (\n             <PostItem key={post.id} post={post} /> \n          ))}\n        </div>\n      );\n    }\n\n    return (\n      <Spinner />            \n    );\n  }\n}\n\nexport default Posts;\n","import React, { Component, Fragment } from 'react';\nimport {Link} from \"react-router-dom\";\nimport axios from \"axios\";\nimport Spinner from './Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\n\nclass Post extends Component {\n    state = {\n        post : [],\n        isLoaded : false\n  }\n\n  componentDidMount(){\n    axios.get(`https://rhidwan.000webhostapp.com/wp-json/wp/v2/posts/${this.props.match.params.id}`)\n    .then( res => this.setState({\n       post : res.data,\n       isLoaded: true\n    }))\n    .catch(err => console.log(err))\n  }\n  \n  render() {\n    const {post, isLoaded} = this.state; \n    if (isLoaded){\n        return (\n            <Fragment>\n                <Link to=\"/\"><FontAwesomeIcon icon={faArrowLeft} />   Go Back</Link>\n                <hr/>\n                <h1>{post.title.rendered}</h1>\n                <div dangerouslySetInnerHTML={{__html: post.content.rendered}} />\n            </Fragment>\n        )\n    }\n    return (\n      <Spinner />\n    );\n  }\n}\n\nexport default Post;\n","import React from 'react';\n\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Posts from \"./components/Posts\";\nimport Post from \"./components/Post\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport './App.css';\nlibrary.add(fab);\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Row>\n          <Col className=\"mt-3 mx-auto\" md={6} sm={8} xs={10}>\n            <h1 className=\"text-center\"><b>Rhidwan's Personal Blog </b></h1>\n            <Row>\n              <Col sm={2} xs={2}><img className=\"avatar\" alt=\"avatar\" src=\"/blog/portrait.jpg\" /></Col>\n              <Col sm={10} xs={10}>Personal Blog By\n                <a href=\"https://rhidwan.github.io\"><u><b> Iqbal Mohammad Rhidwan</b></u></a>\n                <p>Here I talk about some work of mine as a <strong>student of Electrical and Electronic Engineering</strong>  and also as a <strong>Programmer</strong></p>\n              </Col>\n            </Row>\n            <Row className=\"mt-3\">\n              <Container>\n                <Route exact path=\"/blog\" component={Posts} />\n                <Route exact path=\"/blog/post/:id\" component = {Post} />\n              </Container>\n              \n            </Row>  \n          </Col>\n        </Row>\n        <Row>\n          \n        </Row>\n\n        \n      </div>\n     \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}